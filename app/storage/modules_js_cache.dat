/*** dic.js ***/


/**
 * Функционал для восстановления резервных копий записей словарей
 */
$('.restore_version').click(function(e) {
    e.preventDefault();

    // get the link
    var url = $(this).attr('data-url');

    // ask verification
    $.SmartMessageBox({
        title : "<i class='fa fa-refresh txt-color-orangeDark'></i> Восстановить эту резервную копию?",
        content : "Текущая версия будет сохранена",
        buttons : '[Нет][Да]'
    }, function(ButtonPressed) {
        if (ButtonPressed == "Да") {
            location.href = url;
        }
    });
});

/**
 * Функционал для кнопки удаления записи DicVal (в меню) при ее редактировании
 */

$(function(){

    $(".remove-dicval-record").click(function() {
        var $this = this;
        $.SmartMessageBox({
            title : "Удалить данную запись?",
            content : "Восстановить ее будет невозможно",
            buttons : '[Нет][Да]'
        },function(ButtonPressed) {
            if(ButtonPressed == "Да") {
                $.ajax({
                    url: $($this).attr('href'),
                    type: 'DELETE',
                    dataType: 'json',
                    beforeSend: function(){$($this).elementDisabled(true);},
                    success: function(response, textStatus, xhr){
                        if(response.status == true){
                            //showMessage.constructor('Удаление', response.responseText);
                            //showMessage.smallSuccess();
                            //$($this).parents('tr').fadeOut(500,function(){$(this).remove();});
                            location.href = $($this).attr('data-goto');
                        } else {
                            $($this).elementDisabled(false);
                            showMessage.constructor('Удаление', 'Возникла ошибка. Обновите страницу и повторите снова.');
                            showMessage.smallError();
                        }
                    },
                    error: function(xhr, textStatus, errorThrown){
                        $($this).elementDisabled(false);
                        showMessage.constructor('Удаление', 'Возникла ошибка. Повторите снова.');
                        showMessage.smallError();
                    }
                });
            }
        });
        return false;
    });
});

/*** pages.js ***/

// some JS code
$(document).on('click', '.pages_block_redactor_toggle', function(){

    //var element = $('#blockEditModal textarea');
    var element = $(this).parent().parent().find('textarea');
console.log(element);
    var inited = $(element).parent().find('.redactor_editor').attr('class');
console.log(inited);

    if( inited ) {
        $(element).redactor('destroy');
    } else {
        if ( $(element).hasClass('redactor') )
            $(element).redactor(imperavi_config || {});
        else if ( $(element).hasClass('redactor-no-filter') )
            $(element).redactor(imperavi_config_no_filter || {});
    }

});


$(document).on('click', 'button#reset_block_content', function(){

    var default_block_content = $(this).parents('form').find('#default_block_content').html();
    console.log(default_block_content);
    if (default_block_content != '')
        $(this).parents('form').find('.editor_block_content').html(default_block_content);
    return true;

});

/*** menu_editor.js ***/


var menu_items = $('.dd');

var menu_editor = {

    'show_hide_info': function() {
        var info = $('.menu_list_info');
        if ($(menu_items).find('li').length)
            info.hide();
        else
            info.show();
    },

    'update_output': function() {
        updateOutput($('.dd'));
        menu_editor.show_hide_info();
    },

    'show_menu': function(order, items) {
        //console.log(order);
        //console.log(items);

        var $this = this;
        //var menu = '';
        var menu = $this.get_menu_list(order, items);

        //$('.dd').append(menu);
        $(menu_items).find('ol:first').append(menu);
        $this.update_output();
    },


    'add_menu_item': function(type, params) {
        //alert(type);
        //console.log(params);

        var $this = this;
        params.type = type;

        var new_menu_item = $this.get_menu_list_item(params);
        //alert(new_menu_item);

        $(menu_items).find('ol:first').append(new_menu_item);
        $this.update_output();
    },


    'get_menu_list': function(order, items) {

        var $this = this;
        var menu_list = '';

        /**
         * Each item of the list
         */
        $.each(order, function(i, val) {

            /**
             *
             * Childrens
             */
            var inner_list = '';
            if (val.children) {
                inner_list = $this.get_menu_list(val.children, items);
            }
            //console.log(inner_list);

            /**
             * Menu item with childrens list
             */
            menu_item = $this.get_menu_list_item(items[val.id], inner_list);
            //console.log(menu_item);

            menu_list += menu_item;
        });

        return menu_list;
    },

    'get_menu_list_item': function(params, inner_list) {
        var type = params.type;
        //console.log(params);
        var main_block = $('#templates .main').html();
        var block = $('#templates .' + type).html();
        if (!N)
            var N = $(menu_items).find('.dd-item').length;
        //alert(N);
        switch (type) {
            case 'page':
                var title = params.text;
                var mark = 'Страница';
                block = str_replace('%page_id%', params.page_id, block);
                block = str_replace('++page_id++', params.page_id, block);
                block = str_replace('%text%', params.text, block);
                break;
            case 'link':
                var title = params.text || params.url;
                var mark = 'Ссылка';
                block = str_replace('%url%', params.url, block);
                block = str_replace('%text%', params.text, block);
                break;
            case 'route':
                var title = params.text || params.route_name;
                var mark = 'Маршрут';
                block = str_replace('%route_name%', params.route_name, block);
                block = str_replace('%route_params%', params.route_params, block);
                block = str_replace('%text%', params.text || '', block);
                break;
            case 'function':
                var title = params.text || '<без названия>';
                var mark = 'Функция';
                block = str_replace('%function_name%', params.function_name, block);
                block = str_replace('%text%', params.text, block);
                block = str_replace('%use_function_data%', params.use_function_data ? 'checked' : '', block);
                break;
            default:
                break;
        }
        main_block = str_replace('%title%', title || '', main_block);
        main_block = str_replace('%mark%', mark || '', main_block);

        main_block = str_replace('%inner%', block, main_block);
        main_block = str_replace('%N%', params.id || N+1, main_block);
        main_block = str_replace('%attr_title%', params.title || '', main_block);

        main_block = str_replace('%target_blank%', params.target == '_blank' ? 'checked' : '', main_block);
        main_block = str_replace('%is_hidden%', params.hidden == '1' ? 'checked' : '', main_block);

        var inner_list_block = '';
        if (inner_list) {
            inner_list_block = $('#templates .childrens').html();
            inner_list_block = str_replace('%block%', inner_list, inner_list_block);
        }
        main_block = str_replace('%childrens%', inner_list_block || '', main_block);

        return main_block;
    }

}


/**
 * PAGE
 */
$(document).on("click", ".add_to_menu.add_to_menu_page", function(e) {
    e.preventDefault();
    var page_id = $('[name=page_id]').val();
    var text = $('[name=page_id] :selected').text();

    if (!page_id)
        return false;

    menu_editor.add_menu_item('page', {'page_id': page_id, 'text': text});
    return false;
});


/**
 * LINK
 */
$(document).on("click", ".add_to_menu.add_to_menu_link", function(e) {
    e.preventDefault();
    var url = $('[name=link_url]').val();
    var text = $('[name=link_text]').val();

    if (url == 'http://')
        return false;

    menu_editor.add_menu_item('link', {'url': url, 'text': text});
    return false;
});


/**
 * ROUTE
 */
$(document).on("click", ".add_to_menu.add_to_menu_route", function(e) {
    e.preventDefault();
    var route_name = $('[name=route_name]').val();
    var route_params = $('[name=route_params]').val();

    if (!route_name)
        return false;

    menu_editor.add_menu_item('route', {'route_name': route_name, 'route_params': route_params});
    return false;
});


/**
 * FUNCTION
 */
$(document).on("click", ".add_to_menu.add_to_menu_function", function(e) {
    e.preventDefault();
    var function_name = $('[name=function_name]').val();
    var text = $('[name=function_name] :selected').text();

    if (!function_name)
        return false;

    menu_editor.add_menu_item('function', {'function_name': function_name, 'text': text});
    return false;
});


$(document).on("keyup", ".text_for_title", function(e) {
    var title = $(this).val();

    if (title == '') {
        //console.log($(this).parents('.menu_item_type_content'));
        title = $(this).parents('.menu_item_type_content').find('.default_text_for_title').val();
    }

    $(this).parents('.panel').find('.menu_item_title').text(title);
});


$(document).on("click", ".delete_menu_item", function(e) {

    e.preventDefault();

    //var block = $(this).parents('.menu_item');
    var block = $(this).parents('.dd-item');
    //console.log(block);

    // ask verification
    $.SmartMessageBox({
        title : "<i class='fa fa-refresh txt-color-orangeDark'></i> Удалить элемент меню?",
        content : "Восстановить его будет невозможно",
        buttons : '[Нет][Да]'
    }, function(ButtonPressed) {
        if (ButtonPressed == "Да") {
            $.when(
                $(block).slideUp()
            ).done(function( x ) {
                $(block).remove();
                menu_editor.update_output();
            });
        }
    });

    return false;
});

var nestable_output = $('#nestable-output');
var updateOutput = function(e) {

    var list = e.length ? e : $(e.target),
        output = list.data('output')
        //output = nestable_output
        ;

    //alert(typeof output);
    if (typeof output == 'undefined') {
        return false;
    }

    //console.log(list.nestable('serialize'));
    //console.log(output);
    if (window.JSON) {
        output.val(window.JSON.stringify(list.nestable('serialize')));
        //, null, 2));
    } else {
        output.val('JSON browser support required for this demo.');
    }
};

//init_sortable(false, '.menu_items');
if ($('.dd').length) {
    loadScript(base_url + '/private/js/plugin/jquery-nestable/jquery.nestable.js', function() {

        //alert(nesting_level);

        $('.dd').nestable({
            //group : 1
            maxDepth: nesting_level || 5,
            expandBtnHTML: '',
            collapseBtnHTML: ''
        }).on('change', updateOutput);

        updateOutput($('.dd').data('output', $(nestable_output)));
    });
}

function str_replace(search, replace, subject) {
    return subject.split(search).join(replace);
}

/*** system.js ***/


    function init_sortable(url, selector, success) {
        if (typeof success != 'function')
            success = function(){};
        $(document).on("mouseover", ".sortable" + selector, function(e){
            // Check flag of sortable activated
            if ( !$(this).data('sortable') ) {
                // Activate sortable, if flag is not initialized
                $(this).sortable({
                    // On finish of sorting
                    stop: function() {
                        if (url) {
                            // Find all child elements
                            var pls = $(this).find('tr, .sortable_item');
                            var poss = [];
                            // Make array with current sorting order
                            $(pls).each(function(i, item) {
                                poss.push($(item).data('id'));
                            });
                            // Send ajax request to server for saving sorting order
                            $.ajax({
                                url: url,
                                type: "post",
                                data: { poss: poss },
                                success: success
                            });
                        }
                    },
                    cancel: ".not-sortable",
                    distance: 5
                });
            }
        });
    }



    Array.max = function( array ){
        return Math.max.apply( Math, array );
    };

    // Function to get the Min value in Array
    Array.min = function( array ){
        return Math.min.apply( Math, array );
    };

    /*
    //updated as per Sime Vidas comment.
    var widths= $('img').map(function() {
        return $(this).width();
    }).get();

    alert("Max Width: " + Array.max(widths));
    alert("Min Width: " + Array.min(widths));
    */

    jQuery.fn.tagName = function() {
        return this.prop("tagName");
    };


    function array_merge() {
        //  discuss at: http://phpjs.org/functions/array_merge/
        // original by: Brett Zamir (http://brett-zamir.me)
        // bugfixed by: Nate
        // bugfixed by: Brett Zamir (http://brett-zamir.me)
        //    input by: josh
        //   example 1: arr1 = {"color": "red", 0: 2, 1: 4}
        //   example 1: arr2 = {0: "a", 1: "b", "color": "green", "shape": "trapezoid", 2: 4}
        //   example 1: array_merge(arr1, arr2)
        //   returns 1: {"color": "green", 0: 2, 1: 4, 2: "a", 3: "b", "shape": "trapezoid", 4: 4}
        //   example 2: arr1 = []
        //   example 2: arr2 = {1: "data"}
        //   example 2: array_merge(arr1, arr2)
        //   returns 2: {0: "data"}

        var args = Array.prototype.slice.call(arguments),
            argl = args.length,
            arg,
            retObj = {},
            k = '',
            argil = 0,
            j = 0,
            i = 0,
            ct = 0,
            toStr = Object.prototype.toString,
            retArr = true;

        for (i = 0; i < argl; i++) {
            if (toStr.call(args[i]) !== '[object Array]') {
                retArr = false;
                break;
            }
        }

        if (retArr) {
            retArr = [];
            for (i = 0; i < argl; i++) {
                retArr = retArr.concat(args[i]);
            }
            return retArr;
        }

        for (i = 0, ct = 0; i < argl; i++) {
            arg = args[i];
            if (toStr.call(arg) === '[object Array]') {
                for (j = 0, argil = arg.length; j < argil; j++) {
                    retObj[ct++] = arg[j];
                }
            } else {
                for (k in arg) {
                    if (arg.hasOwnProperty(k)) {
                        if (parseInt(k, 10) + '' === k) {
                            retObj[ct++] = arg[k];
                        } else {
                            retObj[k] = arg[k];
                        }
                    }
                }
            }
        }
        return retObj;
    }